using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Ioc;
using GalaSoft.MvvmLight.Command;
using System.Diagnostics;
using System.Reflection;

namespace newRBS.Database
{
    public abstract class EntityBase
    {
        internal virtual void OnSaving(ChangeAction changeAction) { }

        internal virtual void OnSaved(ChangeAction changeAction) { }
    }

    internal class ChangeEntity
    {
        public ChangeAction ChangeAction { get; set; }

        public EntityBase Entity { get; set; }
    }

    /// <summary>
    /// Class that represents the MS SQL Server database. 
    /// </summary>
    /// <remarks>
    /// It contains tables of the types <see cref="Measurement"/>, <see cref="Sample"/>, <see cref="Material"/>, <see cref="Layer"/>, <see cref="Element"/>, <see cref="Project"/> and <see cref="Measurement_Project"/>.
    /// The code for <see cref="DatabaseDataContext"/> and the table classes is autogenerated from the MS SQL Server database to the file 'Database.designer.cs'. Additional properties and methodes for these classes are defined in 'DatabasePartialMethods.cs'.
    /// </remarks>
    public partial class DatabaseDataContext
    {
        private static string className = MethodBase.GetCurrentMethod().DeclaringType.Name;
        private static readonly Lazy<TraceSource> trace = new Lazy<TraceSource>(() => TraceSources.Create(className));

        /// <summary>
        /// Function that can be used to load specific childs of a table class at its initialization.
        /// </summary>
        /// <remarks>
        /// This is useful if a child has to be used after the scope of <see cref="DatabaseDataContext"/> ended.
        /// </remarks>
        partial void OnCreated()
        {
            //Console.WriteLine("OnCreated");
            var dlo = new DataLoadOptions();
            dlo.LoadWith<Measurement>(c => c.Sample);
            dlo.LoadWith<Material>(c => c.Layers);
            dlo.LoadWith<Layer>(c => c.LayerElements);
            //this.LoadOptions = dlo;
            //this.Log = Console.Out;
        }

        /// <summary>
        /// Function (overriden version of SubmitChanges) that notifies all child entities about it's change.
        /// </summary>
        /// <param name="failureMode"></param>
        public override void SubmitChanges(ConflictMode failureMode)
        {
            // Get the entities that are to be inserted / updated / deleted
            ChangeSet changeSet = GetChangeSet();

            // Get a single list of all the entities in the change set
            IEnumerable<object> changeSetEntities = changeSet.Deletes;
            changeSetEntities = changeSetEntities.Union(changeSet.Inserts);
            changeSetEntities = changeSetEntities.Union(changeSet.Updates);

            // Get a single list of all the enitities that inherit from EntityBase
            IEnumerable<ChangeEntity> entities =
                 from entity in changeSetEntities.Cast<EntityBase>()
                 select new ChangeEntity()
                 {
                     ChangeAction =
                          changeSet.Deletes.Contains(entity) ? ChangeAction.Delete
                        : changeSet.Inserts.Contains(entity) ? ChangeAction.Insert
                        : changeSet.Updates.Contains(entity) ? ChangeAction.Update
                        : ChangeAction.None,
                     Entity = entity as EntityBase
                 };

            // "Raise" the OnSaving event for the entities 
            foreach (ChangeEntity entity in entities)
            {
                entity.Entity.OnSaving(entity.ChangeAction);
            }

            // Save the changes
            try
            {
                base.SubmitChanges(failureMode);
            }
            catch (ChangeConflictException ex)
            {
                trace.Value.TraceEvent(TraceEventType.Error, 0, "Optimistic concurrency error during Database.SubmitChanges(). Conflicting fiels: " + string.Join(", ", ChangeConflicts[0].MemberConflicts.Select(X => X.Member.Name).ToList()));

                /*
                foreach (ObjectChangeConflict changeConflict in base.ChangeConflicts)
                {
                    System.Data.Linq.Mapping.MetaTable metatable = base.Mapping.GetTable(changeConflict.Object.GetType());
                    StringBuilder sb = new StringBuilder();
                    sb.AppendFormat("Table name: {0}", metatable.TableName);
                    sb.AppendLine();

                    foreach (MemberChangeConflict col in changeConflict.MemberConflicts)
                    {
                        sb.AppendFormat("Column name :    {0}", col.Member.Name); sb.AppendLine();
                        if (col.Member.Name == "SpectrumYByte") { sb.AppendFormat("Original value : skipped"); sb.AppendLine(); sb.AppendFormat("Current value :  skipped"); sb.AppendLine(); sb.AppendFormat("Database value : skipped"); sb.AppendLine(); sb.AppendLine(); continue; }
                        sb.AppendFormat("Original value : {0}", col.OriginalValue.ToString()); sb.AppendLine();
                        sb.AppendFormat("Current value :  {0}", col.CurrentValue.ToString()); sb.AppendLine();
                        sb.AppendFormat("Database value : {0}", col.DatabaseValue.ToString()); sb.AppendLine(); sb.AppendLine();
                    }
                    Console.WriteLine(sb);
                    //changeConflict.Resolve(RefreshMode.KeepCurrentValues);
                }
                */

                base.ChangeConflicts.ResolveAll(RefreshMode.KeepChanges);
                this.SubmitChanges(ConflictMode.ContinueOnConflict);
            }

            // "Raise" the OnSaved event for the entities
            foreach (ChangeEntity entity in entities)
            {
                entity.Entity.OnSaved(entity.ChangeAction);
            }
        }
    }

    /// <summary>
    /// Class that stores the properties of a single measurement.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Measurement"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Measurement
    {
        partial void OnCreated()
        {
            IsTestMeasurement = false;
            StopType = "Manual";
            Orientation = "(undefiened)";
            Chamber = "(undefiened)";
        }

        /// <summary>
        /// Function that is called whenever a <see cref="Measurement"/> instance is inserted/updated/deleted. It calls the corresponding functions in <see cref="DatabaseUtils"/>.
        /// </summary>
        /// <param name="changeAction"></param>
        internal override void OnSaved(ChangeAction changeAction)
        {
            base.OnSaved(changeAction);

            // Load the sample/isotope/element entity before sending the Measurement instance
            Sample tempSample = this.Sample;  
            Isotope tempIsotope = this.Isotope;
            Element tempElement = this.Isotope.Element;

            switch (changeAction)
            {
                case ChangeAction.Insert:
                    DatabaseUtils.SendMeasurementNewEvent(this);
                    break;
                case ChangeAction.Update:
                    DatabaseUtils.SendMeasurementUpdateEvent(this);
                    break;
                case ChangeAction.Delete:
                    DatabaseUtils.SendMeasurementRemoveEvent(this);
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// property that holds the array of the RBS counts per channel. 
        /// </summary>
        /// <remarks>
        /// Internally (in the MS SQL Server database), the data is stored as byte[]/varbinary(MAX). The 'get' and 'set' functions of this property convert the data to/from int[].
        /// Therfore, each accsess of <see cref="Measurement.SpectrumY"/> leads to reading the hole spectrum from the database. As a consequence, one should always save SpectrumY as a local variable before looping over it!
        /// </remarks>
        public int[] SpectrumY
        {
            get
            {
                int[] intArray = new int[SpectrumYByte.Length / sizeof(int)];
                Buffer.BlockCopy(SpectrumYByte.ToArray(), 0, intArray, 0, intArray.Length * sizeof(int));
                return intArray;
            }
            set
            {
                byte[] byteArray = new byte[value.Length * sizeof(int)];
                Buffer.BlockCopy(value, 0, byteArray, 0, byteArray.Length);
                SpectrumYByte = byteArray;
            }
        }

        public int[] SpectrumYModified
        {
            get
            {
                if (SpectrumYModifiedByte== null) return null;
                int[] intArray = new int[SpectrumYModifiedByte.Length / sizeof(int)];
                Buffer.BlockCopy(SpectrumYModifiedByte.ToArray(), 0, intArray, 0, intArray.Length * sizeof(int));
                return intArray;
            }
            set
            {
                byte[] byteArray = new byte[value.Length * sizeof(int)];
                Buffer.BlockCopy(value, 0, byteArray, 0, byteArray.Length);
                SpectrumYModifiedByte = byteArray;
            }
        }

        public int[] SpectrumYSimulated
        {
            get
            {
                if (SpectrumYSimulatedByte == null) return null;
                int[] intArray = new int[SpectrumYSimulatedByte.Length / sizeof(int)];
                Buffer.BlockCopy(SpectrumYSimulatedByte.ToArray(), 0, intArray, 0, intArray.Length * sizeof(int));
                return intArray;
            }
            set
            {
                byte[] byteArray = new byte[value.Length * sizeof(int)];
                Buffer.BlockCopy(value, 0, byteArray, 0, byteArray.Length);
                SpectrumYSimulatedByte = byteArray;
            }
        }

        /// <summary>
        /// Property, which 'get' function calculates the energy values for each channel based on <see cref="Measurement.EnergyCalOffset"/>, <see cref="Measurement.EnergyCalLinear"/> and <see cref="Measurement.EnergyCalQuadratic"/>.
        /// </summary>
        public float[] SpectrumXCal
        {
            get
            {
                float[] spectrumXCal = new float[NumOfChannels];
                for (int i = 0; i < NumOfChannels; i++)
                    spectrumXCal[i] = (float)EnergyCalOffset + i * (float)EnergyCalLinear + i*i*(float)EnergyCalQuadratic;
                return spectrumXCal;
            }
        }
    }

    /// <summary>
    /// Class that stores the properties of an element of the periodic system.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Element"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Element
    {
        public string DisplayName
        { get { return (AtomicNumber.ToString() + " - " + ShortName + " - " + LongName); } }
    }

    /// <summary>
    /// Class that stores the properties of an isotope of the periodic system.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Isotope"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Isotope
    {
        public string IsotopeDisplayName
        {
            get
            {
                if (MassNumber == 0) return "(natural)" + this.Element.ShortName;
                else return MassNumber+this.Element.ShortName + " (" + Abundance + "%)";
            }
        }

        public string ShortDisplayName
        {
            get
            {
                return MassNumber+this.Element.ShortName;
            }
        }
    }

    /// <summary>
    /// Class that stores the properties of an element in <see cref="Layer"/> of a <see cref="Material"/>.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="LayerElement"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class ElementLayer { }

    /// <summary>
    /// Class that stores the properties of a layer of a <see cref="Material"/>.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Layer"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Layer { }

    /// <summary>
    /// Class that stores the properties of a material definition. <see cref="Sample"/>s can contain a reference to a <see cref="Material"/>.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Material"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Material { }

    /// <summary>
    /// Class that stores the properties of a sample. Can contain a reference to a <see cref="Material"/>.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Sample"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Sample { }

    /// <summary>
    /// Class that stores the properties of a project containing several <see cref="Measurement"/>s as defined in <see cref="Measurement_Project"/>.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Project"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Project { }

    /// <summary>
    /// Class that stores the relationship between <see cref="Measurement"/>s and <see cref="Project"/>s.
    /// </summary>
    /// <remarks>
    /// Can be saved to the MS SQL Server database via a table of <see cref="Measurement_Project"/>s in <see cref="DatabaseDataContext"/>.
    /// </remarks>
    public partial class Measurement_Project { }
}
